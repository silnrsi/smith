# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# Move the directory to the second line
format = '$all$directory$character'

# Timeout
command_timeout = 10000

# Inserts a blank line between shell prompts
add_newline = true

# A continuation prompt that displays two filled in arrows
continuation_prompt = '‚ñ∂‚ñ∂ '

[character]
success_symbol = ' [‚ùØ](bold green) '
error_symbol = ' [‚úó](bold red) '

[hostname]
format = '[$hostname](bold white)\]  '

[directory]
truncation_length = 15
truncate_to_repo = false
home_symbol = ' ~ '
disabled = false
read_only = " üîí"

[username]
style_user = 'white bold'
style_root = 'white bold'
format = '\[[$user]($style)@'


[aws]
format = '\[[$symbol($profile)(\($region\))(\[$duration\])]($style)\]'

[bun]
format = '\[[$symbol($version)]($style)\]'

[c]
format = '\[[$symbol($version(-$name))]($style)\]'

[cmake]
format = '\[[$symbol($version)]($style)\]'

[cmd_duration]
format = '\[[‚è± $duration]($style)\]'

[cobol]
format = '\[[$symbol($version)]($style)\]'

[conda]
format = '\[[$symbol$environment]($style)\]'

[crystal]
format = '\[[$symbol($version)]($style)\]'

[daml]
format = '\[[$symbol($version)]($style)\]'

[dart]
format = '\[[$symbol($version)]($style)\]'

[deno]
format = '\[[$symbol($version)]($style)\]'

[docker_context]
format = '\[üê≥ $context]($style)\]'

[dotnet]
format = '\[[$symbol($version)(üéØ $tfm)]($style)\]'

[elixir]
format = '\[[$symbol($version \(OTP $otp_version\))]($style)\]'

[elm]
format = '\[[$symbol($version)]($style)\]'

[erlang]
format = '\[[$symbol($version)]($style)\]'

[fennel]
format = '\[[$symbol($version)]($style)\]'

[fossil_branch]
format = '\[[$symbol$branch]($style)\]'

[gcloud]
format = '\[[$symbol$account(@$domain)(\($region\))]($style)\]'

[git_branch]
symbol = 'ÓÇ†'
truncation_length = 20
truncation_symbol = '..'
always_show_remote = true
format = ' [$symbol $branch ]($style)'

[git_status]
format = '([ $all_status $diverged $behind $ahead_behind ]($style))'
ahead = '‚á°${count}'
diverged = '‚áï‚á°${ahead_count} ‚á£${behind_count}'
behind = '‚á£${count}'

[git_state]
format = '[\($state( $progress_current of $progress_total)\)]($style) '
cherry_pick = '[üçí PICKING](bold red)'

[git_commit]
commit_hash_length = 7
format = '[\($hash$tag\)]($style) ' 
tag_symbol = 'üîñ '
only_detached = true
tag_disabled = false 

[git_metrics]
added_style = 'bold blue'
format = '[+$added]($added_style)/[-$deleted]($deleted_style) '

[golang]
format = '[$symbol($version)]($style)'

[gradle]
format = '\[[$symbol($version)]($style)\]'

[guix_shell]
format = '\[[$symbol]($style)\]'

[haskell]
format = '\[[$symbol($version)]($style)\]'

[haxe]
format = '\[[$symbol($version)]($style)\]'

[helm]
format = '\[[$symbol($version)]($style)\]'

[hg_branch]
format = '\[[$symbol$branch]($style)\]'

[java]
format = '\[[$symbol($version)]($style)\]'

[julia]
format = '\[[$symbol($version)]($style)\]'

[kotlin]
format = '\[[$symbol($version)]($style)\]'

[kubernetes]
format = '\[[$symbol$context( \($namespace\))]($style)\]'

[lua]
format = '\[[$symbol($version)]($style)\]'

[memory_usage]
format = '\[$symbol[$ram( | $swap)]($style)\]'

[meson]
format = '\[[$symbol$project]($style)\]'

[nim]
format = '\[[$symbol($version)]($style)\]'

[nix_shell]
format = '\[[$symbol$state( \($name\))]($style)\]'

[nodejs]
format = '\[[$symbol($version)]($style)\]'

[ocaml]
format = '\[[$symbol($version)(\($switch_indicator$switch_name\))]($style)\]'

[opa]
format = '\[[$symbol($version)]($style)\]'

[openstack]
format = '\[[$symbol$cloud(\($project\))]($style)\]'

[os]
format = '[$symbol]($style)'

[package]
format = '[$symbol$version]($style)'

[perl]
format = '[$symbol($version)]($style)'

[php]
format = '[$symbol($version)]($style)'

[pijul_channel]
format = '\[[$symbol$channel]($style)\]'

[pulumi]
format = '\[[$symbol$stack]($style)\]'

[purescript]
format = '\[[$symbol($version)]($style)\]'

[python]
format = '[${symbol}${pyenv_prefix}(${version})(\($virtualenv\))]($style) '

[raku]
format = '\[[$symbol($version-$vm_version)]($style)\]'

[red]
format = '\[[$symbol($version)]($style)\]'

[ruby]
format = '[$symbol($version)]($style)'

[rust]
format = '[$symbol($version)]($style)'

[scala]
format = '\[[$symbol($version)]($style)\]'

[spack]
format = '\[[$symbol$environment]($style)\]'

[sudo]
format = '[as $symbol]'

[swift]
format = '\[[$symbol($version)]($style)\]'

[terraform]
format = '\[[$symbol$workspace]($style)\]'

[time]
format = '[$time]($style)'

[vagrant]
format = '[$symbol($version)]($style)'

[vlang]
format = '\[[$symbol($version)]($style)\]'

[zig]
format = '\[[$symbol($version)]($style)\]'
