== Introduction ==

smith is a Python-based framework for building, testing and maintaining WSI (Writing Systems Implementation) components such as fonts and keyboards. It is based on waf.
Smith orchestrates and integrates various tools and utilities to make a standards-based open font design and production workflow easier to manage.

Building a font involves numerous steps and various programs, which, if done by hand, would be prohibitively slow. Even working out what those steps are can take a lot of work. Smith uses a dedicated file at the root of the project (the file is python-based) to allow the user to describe how to build the font. By chaining the different build steps intelligently, smith reduces build times to seconds rather than minutes or hours, and makes build, test, fix, repeat cycles very manageable. By making these processes repeatable, including for a number of fonts at the same time, your project can be shared with others simply, or - better yet - it can be included in a CI (Continuous Integration) system. This allows for fonts (and their various source formats) to truly be libre/open source software and developed with open and collaborative methodologies.

Smith is Copyright (c) 2011-2018 SIL International (www.sil.org)
and is released under the 3-Clause BSD License


=== Installation ===

A file called `wscript` needs to be created to control the build process.
This wscript file is in fact a python program but the way it is run is designed to hide that as much from the unsuspecting user as possible. 

The assumption is that smith is installed for you as a package from a repository.
Remember that smith is only the director and a wide range of utilities do the actual work.
See the end of the manual for details of the utilities that smith knows about and can use. 



=== Starting to move your project to smith ===


Use the following to populate your new project with a raw template to adjust and to create the standard folders:

---- 
smith start
----

Then adjust the values to the specifics of your project.



=== Execution ===

The heart of the build system is the `wscript` file that controls the build
process. This is done by the python program creating a set of WSI component
objects. The system then takes these objects and allows the user to run various
build commands.

waf, on which smith is built, works by creating a build directory
into which all the results are stored. This leaves the source directories
pristine and makes for easy clearing up. The build directory is created using
the command:

----
smith configure
----

This process creates the build directory, checks that all the tools that smith
needs to achieve the build as described in `wscript` are available, and sets
up various internal environment variables. Thus if any changes are made to the
`wscript` that indicate what extra tools are needed, then the `configure` command needs
to be rerun.

After configuration it is possible to build the system. This is done using:

----
smith build
----

This creates the final release forms of the various components that are to be
built. For example, it will create any fonts or keyboards. But it does not
create any releases, these need another command:

----
smith zip
----

This creates a zip of all the generated files and the documentation. Since this zip is
targetted at Windows, text files have their line endings changed to CR LF. This is tagged with development versions. 

----
smith tarball
----

This does the same work as the zip target except it uses Linux line endings and
creates a .tar.xz. This is tagged with development versions.

----
smith release
----

This target does two things. First it builds the various components, but marks
the build for release. So things like font version strings contain no
development information, etc. Secondly it builds the various release packages
(zip and tarball).

----
smith exe
----

This creates the installers described by the various package objects. In turn
it also builds everything as specified by `smith build`. This target is
deprecated.

----
smith alltests
----

This creates font tests output by chaining all the available tests.

----
smith pdfs
----

This creates font tests output as pdf.

----
smith fret
----

If the wscript has been set up to generate fret files, this will generate those files.

----
smith graide
----

This creates a subdirectory called graide that contains one .cfg file per font for use with graide.
If the font has no graphite smarts, no configuration file is created (for obvious reasons).

----
smith srcdist 
----

Creates a tarball appropriate for a release including all the buildable sources.

----
smith clean
----

Removes the various files created by `smith build` in the build directory.

----
smith distclean
----

Removes the build directory completely.

=== Writing your wscript ===

The `wscript` file is a python program, but the internal program environment is set up to minimise the amount of actual programming that needs to be done. There is no setup needed in the file, and object registration is automatic. It is possible to add waf specific extensions to the file and for details of this, users should read the waf manual.

The basic process of describing a build process is to create writing system component objects. These objects are `font()`, `kbd()` and `package()`. Specific details on what information each of these objects requires is given in the corresponding sections of this document. Likewise examples are given in the sections.

