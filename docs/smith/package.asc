== Packages ==

Once a set of writing system components have been created, there is the need to package them for distribution. smith works to make that as simple but as powerful as appropriate. Each writing system component (`font`, `kbd`) has an optional `package` attribute. If this attribute is set, it is set to a package object corresponding to which package the component should be added to. In addition a global package object is created into which go all the components for which no `package` attribute has been set.

The global package can take its parameters from the wscript file as global variables with the same name as the attribute, but with the name uppercased.

The attributes to package are:

appname::
    Base application name to use for the installer in lower case. This is required.

version::
    Version number of the installer. This is required.

desc_short::
    One line description of the package.

desc_long::
    Multi-line description of the package.

desc_name::
    Multi-case name to use for the Windows installer generated.

outdir::
    Where to store the generated Windows installer relative to the build directory.

docdir::
    Directory tree to walk pulling in all the files as source files. Used for identifying documentation files. Also used in adding documentation files to installers.

package_files::
    This is a dictionary of filename globs as keys, including the use of ** for recursion. The values are replacement paths. If the value path ends in \/ the path from the key, up to the first *, is replaced with this value.

license::
    License file to use within the package.

reservedofl::
    If set, uses the OFL and assembles a list of reserved font names from the constituent fonts for use within it.

zipfile::
    Name of zip file to use when creating smith zip. Is auto-generated if not set, based on appname and version.

zipdir::
    Directory to store generated zip file in, relative to build directory.

readme::
    Name of readme file to include in the package (default `README.txt`)
    
buildversion::
    This is often defaulted. For a release build (-r or smith release) it is set to empty. For a non-release build, the core of buildversion is based on the current VCS commit identifier. For git this is the sha. The specification of its format is in `buildformat`. `buildversion` is a combination of `buildlabel` plus the generated identifier based on `buildformat`. The buildversion is included in the generated names of the zip and tarball targets and the font version (if the font version attribute is not a tuple).

buildlabel::
    The development version label, for example alpha2.

buildformat::
    Formats the vcs commit identifier or whatever in the development buildversion. This is a str.format type string and the following named parameters are available. The default for this variable is `dev-{vcssha:6}{vcsmodified}`

    vcssha;;
        Unique commit identifier
    
    vcsmodifier;;
        Returns M if the sources we are building from are not the same as the commit.

    vcstype;;
        Specifies the VCS system being used: git, hg, svn.

    buildnumber;;
        Continuous integration build build number

=== Functions ===

==== getufoinfo ====

This function takes a path to a UFO font. It extracts information from the font and sets the corresponding variables in the wscript as if they had been entered directly. Thus those variables are usable elsewhere in the wscript. Important note: getufoinfo() must be the first function called in the wscript.

The variables set are:

version::
    Taken from the VersionMajor and VersionMinor

buildlabel::
    Taken from the openTypeNameVersion parsed to remove the initial Version d.ddd and any dev-ident.
