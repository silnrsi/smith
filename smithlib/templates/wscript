#!/usr/bin/python2
# encoding: utf-8
# this is a smith configuration file - http://scripts.sil.org/smith
# please adjust this template to your needs

# set some default output folders (most are already set by default)
DOCDIR = ["documentation", "web"]
STANDARDS = 'tests/reference'

# set the version control system for srcdist
VCS = 'git'

# set the font name and description
APPNAME = 'Foo'
FAMILY = APPNAME
DESC_SHORT = "This is a short one line description: max 72 char"

# Get version and authorship information from Regular UFO (canonical metadata); must be first function call:
getufoinfo('source/' + FAMILY + '-Regular' + '.ufo')
BUILDLABEL = "alpha"

# Set up the FTML tests
ftmlTest('tests/ftml.xsl', fonts=['../reference/Foo-Regular-1_001.ttf'], addfontindex=1, fontmode='collect')

# set up the sile tests (using fontproof)
testCommand('sile', cmd='${SILE} -debug versions -o "${TGT}" "${SRC[0].abspath()}" -f "${SRC[1]}"', extracmds=['sile'],
            shapers=0, supports=['.sil'], ext='.pdf')

# set the build and test parameters
TESTSTRING = u'\u0E07\u0331 \u0E0D\u0331 \u0E19\u0331 \u0E21\u0331'

# set up the build parameters from the designspace file(s)
for dspace in ('Roman', 'Italic'):
    designspace('source/' + FAMILY + dspace + '.designspace',
                target="${DS:FILENAME_BASE}.ttf",
                opentype=fea("source/opentype/${DS:FILENAME_BASE}.fea",
                             master="source/opentype/" + FAMILY + ".feax",
                             ap='source/${DS:FILENAME_BASE}_ap.xml',
                             make_params="--omitaps='_R'",
                             params='-m source/${DS:FILENAME_BASE}.map',
                             depends='source/opentype/' + 'myfoofeatures.fea'),
                graphite=gdl("source/${DS:FILENAME_BASE}.gdl",
                             master=['source/graphite/' + FAMILY + 'master.gdl'],
                             make_params="-m _R -z 8",
                             params='-d -w3521 -w3530 -q -v2-e gdlerr-${DS:FILENAME_BASE}.txt ',
                             depends=['source/graphite/myfeatures.gdl']),
                script=['foo', 'DFLT'],
                ap='generated/' + '${DS:FILENAME_BASE}.xml',
                classes='source/' + 'classes.xml',
                fret=fret(params='-r -b'),
                woff=woff(params='-v ' + VERSION + ' -m ../source/foo-WOFF-metadata.xml'),
                typetuner='source/typetuner/feat_all.xml',
    )


# declare other local variables or utilities
def configure(ctx):
    ctx.env['FOO'] = 'foo'
    ctx.find_program('foobar')
