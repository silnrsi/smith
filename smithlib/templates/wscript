#!/usr/bin/python3
# encoding: utf-8
# this is a smith configuration file - http://scripts.sil.org/smith
# please adjust this template to your needs

# set some default output folders (most are already set by default)
DOCDIR = ["documentation", "web"]
STANDARDS = 'tests/reference'

# set the font name and description
APPNAME = 'Foo'
FAMILY = APPNAME
DESC_SHORT = "This is a short one line description: max 72 char"

# Get version and authorship information from Regular UFO (canonical metadata); must be first function call:
getufoinfo('source/' + FAMILY + '-Regular' + '.ufo')
BUILDLABEL = "alpha"

# Set up the FTML tests
ftmlTest('tests/ftml.xsl', fonts=['../reference/Foo-Regular.ttf'], addfontindex=1, fontmode='collect')

# set the build and test parameters
TESTSTRING = u'\u0E07\u0331 \u0E0D\u0331 \u0E19\u0331 \u0E21\u0331'
OMITAPS = '--omitaps="_R,R"'
generated = 'generated/'

# set up the build parameters from the designspace file(s)
for dspace in ('Roman', 'Italic'):
    designspace('source/' + FAMILY + dspace + '.designspace',
                target=process("${DS:FILENAME_BASE}.ttf",
                    cmd('${PSFCHANGETTFGLYPHNAMES} ${SRC} ${DEP} ${TGT}', ['source/${DS:FILENAME_BASE}.ufo']),
                ),
                opentype=fea(generated + "${DS:FILENAME_BASE}.fea",
                             master="source/opentype/master.feax",
                             make_params=OMITAPS,
                             mapfile=generated + '${DS:FILENAME_BASE}.map',
                             params='',
                             depends=['source/opentype/' + 'myfoofeatures.fea'],
                             ),
                graphite=gdl("generated/${DS:FILENAME_BASE}.gdl",
                             master='source/graphite/master.gdl',
                             make_params=OMITAPS,
                             params='-d -e ${DS:FILENAME_BASE}_gdlerr.txt ',
                             ap=generated + '${DS:FILENAME_BASE}.xml',
                             depends=['source/graphite/myfeatures.gdl'],
                             ),
                classes='source/' + 'classes.xml',
                woff=woff(params='-v ' + VERSION + ' -m ../source/${DS:FAMILYNAME}-WOFF-metadata.xml'),
                typetuner='source/typetuner/feat_all.xml',
                script=['foo', 'DFLT'],
                fret=fret(params='-r -oi'),
                )


# declare other local variables or utilities
def configure(ctx):
    ctx.env['FOO'] = 'foo'
    ctx.find_program('psfchangettfglyphnames')
